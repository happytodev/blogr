<?php

namespace Happytodev\Blogr\Helpers;

use Happytodev\Blogr\Models\BlogPost;
use Illuminate\Support\Str;

class SEOHelper
{
    /**
     * Generate SEO metadata for blog listing pages (index, category, tag)
     */
    public static function forListingPage(string $type = 'index', ?string $name = null, ?string $description = null): array
    {
        $config = config('blogr.seo', []);
        $defaultConfig = [
            'default_title' => 'Blog',
            'default_description' => 'Discover our latest articles and insights',
            'default_keywords' => 'blog, articles, news, insights',
        ];

        $baseTitle = $config['default_title'] ?? $defaultConfig['default_title'];
        $baseDescription = $description ?: ($config['default_description'] ?? $defaultConfig['default_description']);

        $seo = [
            'title' => $baseTitle,
            'description' => $baseDescription,
            'keywords' => $config['default_keywords'] ?? $defaultConfig['default_keywords'],
            'canonical' => url()->current(),
            'og_type' => 'website',
            'schema_type' => 'WebPage',
            'robots' => 'index, follow',
        ];

        switch ($type) {
            case 'category':
                if ($name) {
                    $seo['title'] = "Category: {$name} - {$baseTitle}";
                    $seo['description'] = "Browse all articles in the {$name} category. {$baseDescription}";
                    $seo['keywords'] = "{$name}, " . ($config['default_keywords'] ?? $defaultConfig['default_keywords']);
                }
                break;

            case 'tag':
                if ($name) {
                    $seo['title'] = "Tag: {$name} - {$baseTitle}";
                    $seo['description'] = "Articles tagged with {$name}. {$baseDescription}";
                    $seo['keywords'] = "{$name}, " . ($config['default_keywords'] ?? $defaultConfig['default_keywords']);
                }
                break;

            case 'index':
            default:
                // Keep default values
                break;
        }

        return $seo;
    }

    /**
     * Generate SEO metadata for individual blog post
     */
    public static function forBlogPost(BlogPost $post): array
    {
        $config = config('blogr.seo', []);
        $defaultConfig = [
            'og' => [
                'image' => '/images/blogr.webp',
                'image_width' => 1200,
                'image_height' => 630,
            ],
        ];

        // Use post-specific metadata if available, otherwise fall back to defaults
        $title = $post->meta_title ?: $post->title;
        $description = $post->meta_description ?: self::generateDescription($post->content);
        $keywords = $post->meta_keywords ?: self::generateKeywords($post->title, $post->content, $post->tags);

        $seo = [
            'title' => $title,
            'description' => Str::limit($description, 160),
            'keywords' => $keywords,
            'canonical' => route('blog.show', $post->slug),
            'og_type' => 'article',
            'schema_type' => 'BlogPosting',
            'robots' => 'index, follow',
            'author' => $post->user->name ?? ($config['site_name'] ?? 'My Blog'),
            'published_time' => $post->published_at?->toISOString(),
            'modified_time' => $post->updated_at->toISOString(),
            'tags' => $post->tags->pluck('name')->toArray(),
        ];

        // Add image if post has one
        if ($post->photo) {
            $seo['image'] = $post->photo_url;
            $seo['image_width'] = 1200; // Default OG image dimensions
            $seo['image_height'] = 630;
        } else {
            $seo['image'] = asset($config['og']['image'] ?? $defaultConfig['og']['image']);
            $seo['image_width'] = $config['og']['image_width'] ?? $defaultConfig['og']['image_width'];
            $seo['image_height'] = $config['og']['image_height'] ?? $defaultConfig['og']['image_height'];
        }

        // Note: Structured data will be generated by generateJsonLd method

        return $seo;
    }

    /**
     * Generate description from post content
     */
    private static function generateDescription(string $content): string
    {
        // Strip HTML and get first 160 characters
        $plainText = strip_tags($content);
        $description = Str::limit($plainText, 160);

        // If description is too short, add default text
        if (strlen($description) < 50) {
            $description .= ' Read more on our blog.';
        }

        return $description;
    }

    /**
     * Generate keywords from title, content, and tags
     */
    private static function generateKeywords(string $title, string $content, $tags): string
    {
        $keywords = [];

        // Add words from title (important keywords)
        $titleWords = explode(' ', $title);
        $keywords = array_merge($keywords, array_slice($titleWords, 0, 3));

        // Add tag names
        if ($tags && $tags->count() > 0) {
            $keywords = array_merge($keywords, $tags->pluck('name')->toArray());
        }

        // Add some default keywords
        $keywords = array_merge($keywords, ['blog', 'article', 'news']);

        // Remove duplicates and limit to 10 keywords
        $keywords = array_unique($keywords);
        $keywords = array_slice($keywords, 0, 10);

        return implode(', ', $keywords);
    }

    /**
     * Generate complete JSON-LD structured data for a page
     */
    public static function generateJsonLd(array $seoData): string
    {
        $config = config('blogr.seo', []);
        $defaultConfig = [
            'structured_data' => [
                'organization' => [
                    'name' => 'My Blog',
                    'url' => url('/'),
                    'logo' => url('/images/logo.png'),
                ],
            ],
            'default_description' => 'Discover our latest articles and insights',
        ];

        $baseSchema = [
            '@context' => 'https://schema.org',
            '@type' => $seoData['schema_type'] ?? 'WebPage',
            'name' => $seoData['title'] ?? ($config['default_title'] ?? 'Blog'),
            'description' => $seoData['description'] ?? ($config['default_description'] ?? $defaultConfig['default_description']),
            'url' => $seoData['canonical'] ?? url()->current(),
            'publisher' => [
                '@type' => 'Organization',
                'name' => $config['structured_data']['organization']['name'] ?? $defaultConfig['structured_data']['organization']['name'],
                'url' => $config['structured_data']['organization']['url'] ?? $defaultConfig['structured_data']['organization']['url'],
                'logo' => [
                    '@type' => 'ImageObject',
                    'url' => $config['structured_data']['organization']['logo'] ?? $defaultConfig['structured_data']['organization']['logo']
                ]
            ]
        ];

        // Add additional schema data if available (for blog posts)
        if (isset($seoData['schema_additional'])) {
            $additionalData = json_decode($seoData['schema_additional'], true);
            if ($additionalData) {
                $baseSchema = array_merge($baseSchema, $additionalData);
            }
        }

        // Add specific properties for blog posts
        if (($seoData['schema_type'] ?? '') === 'BlogPosting') {
            $baseSchema['@type'] = 'BlogPosting';
            $baseSchema['headline'] = $seoData['title'] ?? $config['default_title'];
            if (isset($seoData['author'])) {
                $baseSchema['author'] = [
                    '@type' => 'Person',
                    'name' => $seoData['author']
                ];
            }
            if (isset($seoData['published_time'])) {
                $baseSchema['datePublished'] = $seoData['published_time'];
            }
            if (isset($seoData['modified_time'])) {
                $baseSchema['dateModified'] = $seoData['modified_time'];
            }
            if (isset($seoData['image'])) {
                $baseSchema['image'] = $seoData['image'];
            }
        }

        return json_encode($baseSchema, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_HEX_QUOT | JSON_HEX_APOS);
    }
}
