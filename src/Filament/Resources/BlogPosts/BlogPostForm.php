<?php

namespace Happytodev\Blogr\Filament\Resources\BlogPosts;

use Illuminate\Support\Str;
use Filament\Schemas\Schema;
use Filament\Facades\Filament;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Toggle;
use Happytodev\Blogr\Models\Category;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\MarkdownEditor;
use Filament\Schemas\Components\Utilities\Set;
use Filament\Schemas\Components\Utilities\Get;

class BlogPostForm
{
    public static function configure(Schema $schema): Schema
    {
        return $schema
            ->components([
                TextInput::make('title')
                    ->required()
                    ->maxLength(255)
                    ->live(onBlur: true)
                    ->afterStateUpdated(function (Set $set, ?string $state) {
                        if ($state) {
                            $set('slug', Str::slug($state));
                        }
                    })
                    ->helperText('255 characters maximum.'),
                FileUpload::make('photo')
                    ->image()
                    ->imageEditor()
                    ->imageEditorAspectRatios([
                        null,
                        '16:9',
                        '4:3',
                        '1:1',
                    ])
                    ->directory('blog-photos')
                    ->columnSpanFull()
                    ->nullable(),
                Select::make('category_id')
                    ->label('Category')
                    ->options(Category::pluck('name', 'id'))
                    ->default(function () {
                        return Category::where('is_default', true)->first()->id;
                    })
                    ->required(),
                Select::make('tags')
                    ->multiple()
                    ->relationship('tags', 'name')
                    ->preload()
                    ->createOptionForm([
                        TextInput::make('name')
                            ->required()
                            ->maxLength(255)
                            ->live(onBlur: true)
                            ->afterStateUpdated(function (Set $set, ?string $state) {
                                if ($state) {
                                    $set('slug', Str::slug($state));
                                }
                            }),
                        TextInput::make('slug')
                            ->required()
                            ->unique()
                            ->maxLength(255),
                    ]),
                MarkdownEditor::make('content')
                    ->required()
                    ->columnSpanFull()
                    ->helperText('Use Markdown syntax for formatting.'),
                TextInput::make('slug')
                    ->required()
                    ->unique()
                    ->maxLength(255)
                    ->helperText('Autogenerated slug for the blog post but still modifiable. Must be unique.'),
                Hidden::make('user_id')
                    ->default(fn() => Filament::auth()->user()->id),
                Toggle::make('is_published')
                    ->label(function (Get $get) { 
                        $isPublished = $get('is_published');
                        $publishedAt = $get('published_at');

                        if (!$isPublished) {
                            return 'Draft';
                        }

                        if (!$publishedAt) {
                            return 'Published';
                        }

                        $publishDate = \Carbon\Carbon::parse($publishedAt);
                        if ($publishDate->isFuture()) {
                            return 'Scheduled';
                        }

                        return 'Published';
                    })
                    ->onColor(function (Get $get) {
                        $publishedAt = $get('published_at');

                        if ($publishedAt && \Carbon\Carbon::parse($publishedAt)->isFuture()) {
                            return 'warning'; // Orange for scheduled
                        }

                        return 'success'; // Green for published
                    })
                    ->offColor('gray') // Gray for draft
                    ->default(false)
                    ->live()
                    ->afterStateUpdated(function (Set $set, ?bool $state, $context) {
                        if ($state && $context === 'create') {
                            // Only set published_at to now for new posts
                            $set('published_at', now()->format('Y-m-d\TH:i'));
                        } elseif (!$state) {
                            // Clear published_at when unpublishing
                            $set('published_at', null);
                        }
                    }),
                DateTimePicker::make('published_at')
                    ->label('Publish Date')
                    ->nullable()
                    ->live()
                    ->after(now())
                    ->helperText('Leave empty for immediate publication, or set a future date to schedule publication.'),
                TextInput::make('meta_title')
                    ->label('Meta Title')
                    ->nullable()
                    ->helperText('SEO title for the blog post.'),
                TextInput::make('meta_description')
                    ->label('Meta Description')
                    ->nullable()
                    ->helperText('SEO description for the blog post.'),
                TextInput::make('meta_keywords')
                    ->label('Meta Keywords')
                    ->nullable()
                    ->helperText('SEO keywords for the blog post, separated by commas.'),
                Textarea::make('tldr')
                    ->label('TL;DR')
                    ->columnSpanFull()
                    ->maxLength(255)
                    ->nullable()
                    ->live()
                    ->helperText(function ($state, Textarea $component) {
                        $max = $component->getMaxLength();
                        $remaining = $max - strlen($state);
                        $text = "A brief summary of the blog post, displayed at the top. Remaining characters : $remaining / $max.";
                        return $text;
                    })
            ]);
    }
}
